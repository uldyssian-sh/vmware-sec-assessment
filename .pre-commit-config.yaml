# Pre-commit hooks configuration for VMware Security Assessment
# See https://pre-commit.com for more information

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-xml
      - id: check-toml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ['--maxkb=1024']
      - id: detect-private-key
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # PowerShell specific checks
  - repo: local
    hooks:
      - id: powershell-syntax-check
        name: PowerShell Syntax Check
        entry: pwsh
        args: ['-Command', 'Get-ChildItem -Filter "*.ps1" -Recurse | ForEach-Object { $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$null) }']
        language: system
        files: '\.ps1$'
        
      - id: powershell-script-analyzer
        name: PowerShell Script Analyzer
        entry: pwsh
        args: ['-Command', 'Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery -Severity Warning,Error']
        language: system
        files: '\.ps1$'
        pass_filenames: false

  # Python checks
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88']

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=88', '--extend-ignore=E203,W503']

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile', 'black']

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '\.lock$|\.git/|test.*\.json$'

  # Markdown checks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ['--config', '.markdownlint.json']

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: '\.github/workflows/.*\.yml$'



  # Git commit message format
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # License header check
  - repo: local
    hooks:
      - id: license-header-check
        name: License Header Check
        entry: bash
        args: ['-c', 'for file in $(find . -name "*.ps1" -o -name "*.py"); do if ! head -10 "$file" | grep -q "Copyright\|License\|MIT\|Apache"; then echo "Missing license header in $file"; exit 1; fi; done']
        language: system
        pass_filenames: false

# Global configuration
default_stages: [commit, push]
fail_fast: false

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false