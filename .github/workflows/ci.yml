name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  powershell-test:
    name: PowerShell Module Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
      
      - name: Validate PowerShell Module
        shell: pwsh
        run: |
          Write-Host "Testing PowerShell module structure..."
          if (Test-Path "VMwareSecAssessment.psd1") {
            Write-Host "✓ Module manifest found"
            $manifest = Test-ModuleManifest -Path "VMwareSecAssessment.psd1" -ErrorAction SilentlyContinue
            if ($manifest) {
              Write-Host "✓ Module manifest is valid"
              Write-Host "Module Version: $($manifest.Version)"
            } else {
              Write-Warning "Module manifest validation failed"
            }
          } else {
            Write-Error "Module manifest not found"
          }
          
          if (Test-Path "VMwareSecAssessment.psm1") {
            Write-Host "✓ Module file found"
          } else {
            Write-Error "Module file not found"
          }
      
      - name: Run Pester Tests
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          if (Test-Path "tests/unit/Module.Tests.ps1") {
            Invoke-Pester -Path "tests/unit/Module.Tests.ps1" -OutputFormat NUnitXml -OutputFile "test-results.xml"
          } else {
            Write-Host "No unit tests found, creating basic validation"
          }
  
  python-validation:
    name: Python Dependencies Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Validate requirements.txt
        run: |
          if [ -f requirements.txt ]; then
            echo "✓ requirements.txt found"
            pip install --dry-run -r requirements.txt
            echo "✓ All dependencies are valid"
          else
            echo "No requirements.txt found"
          fi
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  
  validation:
    name: Repository Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate repository structure
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          
          # Check required files
          required_files=("README.md" "LICENSE" "CONTRIBUTING.md" "CODE_OF_CONDUCT.md")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing"
              exit 1
            fi
          done
          
          # Check directory structure
          required_dirs=(".github" "src" "tests" "docs")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✓ $dir/ directory exists"
            else
              echo "✗ $dir/ directory missing"
            fi
          done
          
          echo "✓ Repository validation completed successfully"
